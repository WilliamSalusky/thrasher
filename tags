!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
APXS_BIN	Makefile	/^APXS_BIN     = ~\/sandbox\/bin\/apxs$/;"	m
CFLAGS	Makefile	/^CFLAGS   = -DDEBUG -Wall -O3 -ggdb -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64$/;"	m
GLIB_INCLUDES	Makefile	/^GLIB_INCLUDES = `pkg-config  --cflags glib-2.0`$/;"	m
GLIB_LIBS	Makefile	/^GLIB_LIBS     = `pkg-config  --libs glib-2.0`$/;"	m
LOG	thrashd.c	36;"	d	file:
MAX_HOST_SIZE	thrashd.c	34;"	d	file:
MAX_URI_SIZE	thrashd.c	33;"	d	file:
TKEY	mod_thrasher.c	50;"	d	file:
TYPE_INJECT	thrashd.c	/^    TYPE_INJECT$/;"	e	enum:__anon1	file:
TYPE_REMOVE	thrashd.c	/^    TYPE_REMOVE,$/;"	e	enum:__anon1	file:
TYPE_THRESHOLD	thrashd.c	/^    TYPE_THRESHOLD = 0,$/;"	e	enum:__anon1	file:
VERSION	version.h	1;"	d
VERSION_NAME	version.h	2;"	d
__FAVOR_BSD	thrashd.c	16;"	d	file:
addr	thrashd.c	/^    uint32_t        addr;$/;"	m	struct:rbl_negcache	file:
beef_injector	master_thrasher.c	/^beef_injector(void)$/;"	f
bind_addr	thrashd.c	/^static char    *bind_addr;$/;"	v	file:
bind_port	thrashd.c	/^static uint16_t bind_port;$/;"	v	file:
block_addr	thrashd.c	/^block_addr(client_conn_t * conn, qstats_t * stats)$/;"	f
block_ratio	thrashd.c	/^typedef struct block_ratio {$/;"	s	file:
block_ratio_t	thrashd.c	/^} block_ratio_t;$/;"	t	typeref:struct:block_ratio	file:
blocked_node	thrashd.c	/^typedef struct blocked_node {$/;"	s	file:
blocked_node_t	thrashd.c	/^} blocked_node_t;$/;"	t	typeref:struct:blocked_node	file:
buf	thrashd.c	/^    char           *buf;$/;"	m	struct:iov	file:
client_conn	thrashd.c	/^typedef struct client_conn {$/;"	s	file:
client_conn_t	thrashd.c	/^} client_conn_t;$/;"	t	typeref:struct:client_conn	file:
client_process_data	thrashd.c	/^client_process_data(int sock, short which, client_conn_t * conn)$/;"	f
client_read_header	thrashd.c	/^client_read_header(int sock, short which, client_conn_t * conn)$/;"	f
client_read_injection	thrashd.c	/^client_read_injection(int sock, short which, client_conn_t * conn)$/;"	f
client_read_payload	thrashd.c	/^client_read_payload(int sock, short which, client_conn_t * conn)$/;"	f
client_read_type	thrashd.c	/^client_read_type(int sock, short which, client_conn_t * conn)$/;"	f
cmd_thrasher_host	mod_thrasher.c	/^cmd_thrasher_host(cmd_parms * cmd, void *dummy_config, const char *arg)$/;"	f	file:
cmd_thrasher_port	mod_thrasher.c	/^cmd_thrasher_port(cmd_parms * cmd, void *dummy_config, const char *arg)$/;"	f	file:
conn_addr	thrashd.c	/^    uint32_t        conn_addr;$/;"	m	struct:client_conn	file:
conn_port	thrashd.c	/^    uint16_t        conn_port;$/;"	m	struct:client_conn	file:
connections	thrashd.c	/^    uint32_t        connections;$/;"	m	struct:qstats	file:
count	thrashd.c	/^    uint32_t        count;$/;"	m	struct:blocked_node	file:
current_blocks	thrashd.c	/^GTree          *current_blocks;$/;"	v
current_connections	thrashd.c	/^GSList         *current_connections;$/;"	v
daemonize	thrashd.c	/^daemonize(const char *path)$/;"	f
data	thrashd.c	/^    iov_t           data;$/;"	m	struct:client_conn	file:
do_thresholding	thrashd.c	/^do_thresholding(client_conn_t * conn)$/;"	f
dsn_c_pvt_sfnt	thrashd.c	/^static struct dsn_c_pvt_sfnt {$/;"	s	file:
event	thrashd.c	/^    struct event    event;$/;"	m	struct:client_conn	typeref:struct:client_conn::event	file:
expire_bnode	thrashd.c	/^expire_bnode(int sock, short which, blocked_node_t * bnode)$/;"	f
expire_rbl_negcache	thrashd.c	/^expire_rbl_negcache(int sock, short which, rbl_negcache_t * rnode)$/;"	f
expire_stats_node	thrashd.c	/^expire_stats_node(int sock, short which, qstats_t * stat_node)$/;"	f
facilities	thrashd.c	/^} facilities[] = {$/;"	v	typeref:struct:dsn_c_pvt_sfnt	file:
fill_current_connections	thrashd.c	/^fill_current_connections(client_conn_t * conn, struct evbuffer *buf)$/;"	f
fill_http_blocks	thrashd.c	/^fill_http_blocks(void *key, blocked_node_t * val, struct evbuffer * buf)$/;"	f
first_seen_addr	thrashd.c	/^    uint32_t        first_seen_addr;$/;"	m	struct:blocked_node	file:
free_client_conn	thrashd.c	/^free_client_conn(client_conn_t * conn)$/;"	f
get_rbl_answer	thrashd.c	/^get_rbl_answer(int result, char type, int count, int ttl,$/;"	f
globals_init	thrashd.c	/^globals_init(void)$/;"	f
hard_block_timeout	thrashd.c	/^static uint32_t hard_block_timeout;$/;"	v	file:
hard_timeout	thrashd.c	/^    struct event    hard_timeout;$/;"	m	struct:blocked_node	typeref:struct:blocked_node::event	file:
hard_timeout	thrashd.c	/^    struct event    hard_timeout;$/;"	m	struct:qstats	typeref:struct:qstats::event	file:
host	thrashd.c	/^    char           *host;$/;"	m	struct:query	file:
host_len	thrashd.c	/^    uint16_t        host_len;$/;"	m	struct:query	file:
host_states	thrashd.c	/^GHashTable     *host_states;$/;"	v
host_table	thrashd.c	/^GHashTable     *host_table;$/;"	v
httpd_driver	thrashd.c	/^httpd_driver(struct evhttp_request *req, void *arg)$/;"	f
httpd_put_config	thrashd.c	/^httpd_put_config(struct evhttp_request *req, void *args)$/;"	f
httpd_put_connections	thrashd.c	/^httpd_put_connections(struct evhttp_request *req, void *args)$/;"	f
httpd_put_hips	thrashd.c	/^httpd_put_hips(struct evhttp_request *req, void *args)$/;"	f
initialize_iov	thrashd.c	/^initialize_iov(iov_t * iovec, size_t len)$/;"	f
inject_addr	master_thrasher.c	/^static char    *inject_addr = NULL;$/;"	v	file:
inject_bnode	thrashd.c	/^inject_bnode(void)$/;"	f
iov	thrashd.c	/^typedef struct iov {$/;"	s	file:
iov_t	thrashd.c	/^} iov_t;$/;"	t	typeref:struct:iov	file:
key	thrashd.c	/^    char           *key;$/;"	m	struct:qstats	file:
main	master_thrasher.c	/^main(int argc, char **argv)$/;"	f
main	thrashd.c	/^main(int argc, char **argv)$/;"	f
make_rbl_query	thrashd.c	/^make_rbl_query(uint32_t addr)$/;"	f
mode	master_thrasher.c	/^static uint8_t  mode = 2;$/;"	v	file:
mutex	mod_thrasher.c	/^    apr_thread_mutex_t *mutex;$/;"	m	struct:thrasher_conn	file:
num_connections	thrashd.c	/^    uint32_t        num_connections;$/;"	m	struct:block_ratio	file:
offset	thrashd.c	/^    size_t          offset;$/;"	m	struct:iov	file:
parse_args	master_thrasher.c	/^parse_args(int argc, char **argv)$/;"	f
parse_args	thrashd.c	/^parse_args(int argc, char **argv)$/;"	f
pool	mod_thrasher.c	/^    apr_pool_t     *pool;$/;"	m	struct:thrasher_conn	file:
process_name	thrashd.c	/^static char    *process_name;$/;"	v	file:
qps	thrashd.c	/^static uint32_t qps;$/;"	v	file:
qps_event	thrashd.c	/^struct event    qps_event;$/;"	v	typeref:struct:event
qps_init	thrashd.c	/^qps_init(void)$/;"	f
qps_last	thrashd.c	/^static uint32_t qps_last;$/;"	v	file:
qps_reset	thrashd.c	/^qps_reset(int sock, int which, void *args)$/;"	f
qstats	thrashd.c	/^typedef struct qstats {$/;"	s	file:
qstats_t	thrashd.c	/^} qstats_t;$/;"	t	typeref:struct:qstats	file:
query	thrashd.c	/^    query_t         query;$/;"	m	struct:client_conn	file:
query	thrashd.c	/^typedef struct query {$/;"	s	file:
query_t	thrashd.c	/^} query_t;$/;"	t	typeref:struct:query	file:
rbl_init	thrashd.c	/^rbl_init(void)$/;"	f
rbl_negative_cache	thrashd.c	/^GTree          *rbl_negative_cache;$/;"	v
rbl_negcache	thrashd.c	/^typedef struct rbl_negcache {$/;"	s	file:
rbl_negcache_t	thrashd.c	/^} rbl_negcache_t;$/;"	t	typeref:struct:rbl_negcache	file:
rbl_negcache_timeout	thrashd.c	/^static uint32_t rbl_negcache_timeout;$/;"	v	file:
rbl_ns	thrashd.c	/^static char    *rbl_ns;$/;"	v	file:
rbl_zone	thrashd.c	/^static char    *rbl_zone;$/;"	v	file:
read_iov	thrashd.c	/^read_iov(iov_t * iovec, int sock)$/;"	f
remove_holddown	thrashd.c	/^remove_holddown(uint32_t addr)$/;"	f
replication_connections	thrashd.c	/^GSList         *replication_connections;$/;"	v
reset_iov	thrashd.c	/^reset_iov(iov_t * iovec)$/;"	f
reset_query	thrashd.c	/^reset_query(query_t * query)$/;"	f
rundaemon	thrashd.c	/^static int      rundaemon;$/;"	v	file:
saddr	thrashd.c	/^    uint32_t        saddr;$/;"	m	struct:blocked_node	file:
saddr	thrashd.c	/^    uint32_t        saddr;$/;"	m	struct:qstats	file:
saddr	thrashd.c	/^    uint32_t        saddr;$/;"	m	struct:query	file:
server_driver	thrashd.c	/^server_driver(int sock, short which, void *args)$/;"	f
server_event	thrashd.c	/^struct event    server_event;$/;"	v	typeref:struct:event
server_init	thrashd.c	/^server_init(void)$/;"	f
server_port	thrashd.c	/^static int      server_port;$/;"	v	file:
set_nb	thrashd.c	/^set_nb(sock)$/;"	f
site_check	thrashd.c	/^static uint32_t site_check;$/;"	v	file:
site_ratio	thrashd.c	/^static block_ratio_t site_ratio;$/;"	v	file:
sock	mod_thrasher.c	/^    apr_socket_t   *sock;$/;"	m	struct:thrasher_conn	file:
sock	thrashd.c	/^    int             sock;$/;"	m	struct:client_conn	file:
soft_block_timeout	thrashd.c	/^static uint32_t soft_block_timeout;$/;"	v	file:
stat_type_host	thrashd.c	/^    stat_type_host$/;"	e	enum:__anon2	file:
stat_type_t	thrashd.c	/^} stat_type_t;$/;"	t	typeref:enum:__anon2	file:
stat_type_uri	thrashd.c	/^    stat_type_uri,$/;"	e	enum:__anon2	file:
strval	thrashd.c	/^    const char     *strval;$/;"	m	struct:dsn_c_pvt_sfnt	file:
syslog_enabled	thrashd.c	/^static int      syslog_enabled;$/;"	v	file:
syslog_init	thrashd.c	/^syslog_init(char *facility)$/;"	f
table	thrashd.c	/^    GHashTable     *table;$/;"	m	struct:qstats	file:
thrashd_addr	master_thrasher.c	/^static char    *thrashd_addr = "127.0.0.1";$/;"	v	file:
thrashd_host	mod_thrasher.c	/^    char           *thrashd_host;$/;"	m	struct:thrasher_config	file:
thrashd_pkt_type	thrashd.c	/^} thrashd_pkt_type;$/;"	t	typeref:enum:__anon1	file:
thrashd_port	master_thrasher.c	/^static int      thrashd_port = 1972;$/;"	v	file:
thrashd_port	mod_thrasher.c	/^    int             thrashd_port;$/;"	m	struct:thrasher_config	file:
thrasher_child_init	mod_thrasher.c	/^thrasher_child_init(apr_pool_t * pool, server_rec * rec)$/;"	f	file:
thrasher_config	mod_thrasher.c	/^typedef struct thrasher_config {$/;"	s	file:
thrasher_config_t	mod_thrasher.c	/^} thrasher_config_t;$/;"	t	typeref:struct:thrasher_config	file:
thrasher_conn	mod_thrasher.c	/^typedef struct thrasher_conn {$/;"	s	file:
thrasher_conn_t	mod_thrasher.c	/^} thrasher_conn_t;$/;"	t	typeref:struct:thrasher_conn	file:
thrasher_connect	mod_thrasher.c	/^thrasher_connect(thrasher_conn_t * tconn, thrasher_config_t * config)$/;"	f
thrasher_directives	mod_thrasher.c	/^const command_rec thrasher_directives[] = {$/;"	v
thrasher_handler	mod_thrasher.c	/^thrasher_handler(request_rec * rec)$/;"	f	file:
thrasher_hooker	mod_thrasher.c	/^thrasher_hooker(apr_pool_t * pool)$/;"	f	file:
thrasher_init_config	mod_thrasher.c	/^thrasher_init_config(apr_pool_t * pool, server_rec * svr)$/;"	f	file:
thrasher_module	mod_thrasher.c	/^module AP_MODULE_DECLARE_DATA thrasher_module = {$/;"	v
thrasher_module	mod_thrasher.c	/^module AP_MODULE_DECLARE_DATA thrasher_module;$/;"	v
timelimit	thrashd.c	/^    uint32_t        timelimit;$/;"	m	struct:block_ratio	file:
timeout	thrashd.c	/^    struct event    timeout;$/;"	m	struct:blocked_node	typeref:struct:blocked_node::event	file:
timeout	thrashd.c	/^    struct event    timeout;$/;"	m	struct:qstats	typeref:struct:qstats::event	file:
timeout	thrashd.c	/^    struct event    timeout;$/;"	m	struct:rbl_negcache	typeref:struct:rbl_negcache::event	file:
to_read	thrashd.c	/^    size_t          to_read;$/;"	m	struct:iov	file:
type	thrashd.c	/^    uint8_t         type;$/;"	m	struct:client_conn	file:
uint32_cmp	thrashd.c	/^uint32_cmp(const void *a, const void *b)$/;"	f
update_thresholds	thrashd.c	/^update_thresholds(client_conn_t * conn, char *key, stat_type_t type)$/;"	f
uri	thrashd.c	/^    char           *uri;$/;"	m	struct:query	file:
uri_check	thrashd.c	/^static uint32_t uri_check;$/;"	v	file:
uri_len	thrashd.c	/^    uint16_t        uri_len;$/;"	m	struct:query	file:
uri_ratio	thrashd.c	/^static block_ratio_t uri_ratio;$/;"	v	file:
uri_states	thrashd.c	/^GHashTable     *uri_states;$/;"	v
uri_table	thrashd.c	/^GHashTable     *uri_table;$/;"	v
val	thrashd.c	/^    int             val;$/;"	m	struct:dsn_c_pvt_sfnt	file:
webserver_init	thrashd.c	/^webserver_init(void)$/;"	f
write_iov	thrashd.c	/^write_iov(iov_t * iovec, int sock)$/;"	f
